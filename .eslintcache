[{"E:\\workspace\\sandpack\\tab-editor-test\\src\\App.js":"1","E:\\workspace\\sandpack\\tab-editor-test\\src\\index.js":"2","E:\\workspace\\sandpack\\tab-editor-test\\src\\reportWebVitals.js":"3","E:\\workspace\\sandpack\\tab-editor-test\\src\\electron-js\\genFileTree.js":"4","E:\\workspace\\sandpack\\tab-editor-test\\src\\Terminal.js":"5","E:\\workspace\\sandpack\\tab-editor-test\\src\\App1.js":"6"},{"size":11867,"mtime":1608857564391,"results":"7","hashOfConfig":"8"},{"size":501,"mtime":1608631469028,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1606370587204,"results":"10","hashOfConfig":"8"},{"size":3501,"mtime":1608623451431,"results":"11","hashOfConfig":"8"},{"size":3171,"mtime":1608781376783,"results":"12","hashOfConfig":"8"},{"size":10961,"mtime":1608626596512,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1b007ue",{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\workspace\\sandpack\\tab-editor-test\\src\\App.js",["27"],"E:\\workspace\\sandpack\\tab-editor-test\\src\\index.js",[],"E:\\workspace\\sandpack\\tab-editor-test\\src\\reportWebVitals.js",[],"E:\\workspace\\sandpack\\tab-editor-test\\src\\electron-js\\genFileTree.js",["28","29"],"const fs = window.require('fs')\r\n//import * as fs from 'fs'\r\n//遍历文件夹，获取所有文件夹里面的文件信息\r\n/*\r\n * @param path 路径\r\n *\r\n */\r\n\r\nfunction geFileList(path) {\r\n    var filesList = []; //最终文件树节点数据\r\n    var targetObj = {}; //当前循环到的文件节点数据\r\n    travelFile(path, filesList, targetObj);\r\n    return filesList;\r\n}\r\n\r\n//遍历读取文件\r\nfunction travelFile(path, filesList, targetObj) {\r\n    var files = fs.readdirSync(path);//需要用到同步读取\r\n    files.forEach(file => {\r\n        var states = fs.statSync(path + '/' + file);\r\n        if (states.isDirectory()) { //文件夹\r\n            var item;\r\n            if (targetObj[\"subdirectory\"]) {\r\n                item = {\r\n                    filename: file,\r\n                    isFolder: true,\r\n                    extend: false,\r\n                    path: path + '/' + file,\r\n                    subdirectory: []\r\n                };\r\n                targetObj[\"subdirectory\"].push(item);\r\n            }\r\n            else {\r\n                item = {\r\n                    filename: file,\r\n                    isFolder: true,\r\n                    extend: false,\r\n                    path:path+'/'+file,\r\n                    subdirectory: []\r\n                };\r\n                filesList.push(item);\r\n            }\r\n            travelFile(path + '/' + file, filesList, item);\r\n        }\r\n        else { //文件\r\n            if (targetObj[\"subdirectory\"]) {\r\n                var item = {\r\n                    filename: file,\r\n                    isFolder: false,\r\n                    path: path + '/' + file\r\n                }\r\n                targetObj[\"subdirectory\"].push(item);\r\n            }\r\n            else {\r\n                var item = {\r\n                    filename: file,\r\n                    isFolder:false,\r\n                    path: path + '/' + file\r\n                };\r\n                filesList.push(item);\r\n            }\r\n        }\r\n    });\r\n}\r\n//读取文件\r\nfunction readFile(file) {\r\n    //var filedata;\r\n    return fs.readFileSync(file, 'utf-8');\r\n}\r\n//写入文件utf-8格式\r\nfunction writeFile(fileName, data) {\r\n    fs.writeFile(fileName, data, 'utf-8', complete);\r\n    function complete() {\r\n        console.log(\"文件生成成功\");\r\n    }\r\n}\r\nfunction renameFile(oldpath,newpath) {\r\n    fs.renameSync(oldpath, newpath)\r\n}\r\nfunction deleteFile(path) {\r\n    fs.unlink(path, (err) => {\r\n        if (err) {console.log(err);return;}\r\n        console.log(`删除文件成功`);\r\n    })\r\n}\r\nfunction deleteFolder(path) {\r\n    fs.readdir(path, (err, data) => {\r\n        if (err) {console.log(err);return;}\r\n        for (let i = 0; i < data.length; i++) {\r\n            fs.unlink(path+`/${data[i]}`, (err) => {\r\n                if (err) {console.log(err);return;}\r\n                console.log(`删除文件成功`);\r\n            })\r\n        }\r\n        fs.rmdir(path, (err) => {\r\n            if (err) {console.log(err);return;}\r\n            console.log(`删除文件夹成功`);\r\n        })\r\n        console.log(data);\r\n    })\r\n}\r\nfunction mkdir(path) {\r\n    fs.mkdir(path, (err) => {\r\n        if (err) {console.log(err);return;}\r\n        console.log(`创建成功`);\r\n    })\r\n}\r\nwindow.file = {\r\n    geFileList,\r\n    writeFile, //异步写入文件，若存在则覆盖原文件内容，若不存在则新建文件\r\n    readFile, //同步读取文件内容\r\n    mkdir,\r\n    renameFile,\r\n    deleteFile,\r\n    deleteFolder\r\n}\r\nmodule.exports = window.file","E:\\workspace\\sandpack\\tab-editor-test\\src\\Terminal.js",[],"E:\\workspace\\sandpack\\tab-editor-test\\src\\App1.js",[],{"ruleId":"30","severity":1,"message":"31","line":48,"column":5,"nodeType":"32","messageId":"33","endLine":48,"endColumn":13},{"ruleId":"34","severity":1,"message":"35","line":47,"column":21,"nodeType":"32","messageId":"36","endLine":47,"endColumn":25},{"ruleId":"34","severity":1,"message":"35","line":55,"column":21,"nodeType":"32","messageId":"36","endLine":55,"endColumn":25},"no-unused-vars","'inifiles' is assigned a value but never used.","Identifier","unusedVar","no-redeclare","'item' is already defined.","redeclared"]